name: Generate Release Notes
run-name: Generate Release Notes

on:
  release:
    types: [published]

jobs:
  run-script-to-generate-release-notes:
    name: Generate Release Notes
    runs-on: ubuntu-latest
    steps:
      - name: Copy this repository to the Linux runner
        uses: actions/checkout@v4
        with:
          # By default actions/checkout fetches the .git folder with only a small part of the git history
          # usually the latest commit only, and my release notes script needs all the git history
          # so I need to add this "fetch-depth: 0", which makes it fetch ALL the git history/commit messages
          fetch-depth: 0

      - name: Install libcurl
        run: sudo apt install libcurl4-openssl-dev

      - name: Download nlohmann json.hpp header file
        run: wget https://raw.githubusercontent.com/nlohmann/json/develop/single_include/nlohmann/json.hpp

      - name: Build the script
        run: g++ -o release_notes_generator release_notes_generator.cpp -lcurl -I.
      
      - name: Get the new release tag name
        id: get-new-release-tag
        # I read the tag name of the release that triggered this workflow, by accessing its JSON value using "jq"
        # Details related to the release are in the JSON file/event payload located in the GITHUB_EVENT_PATH environment variable
        # The echo command adds NEW_RELEASE_TAG_NAME as an output from this step so that I can use it in the next steps
        run: |
          NEW_RELEASE_TAG_NAME=$(jq -r .release.tag_name "$GITHUB_EVENT_PATH")
          echo "NEW_RELEASE_TAG_NAME=$NEW_RELEASE_TAG_NAME" >> "GITHUB_OUTPUT"
        
      - name: Get the closest previous release tag name
        id: get-previous-release-tag
        env:
          NEW_RELEASE_TAG_NAME: ${{ steps.get-new-release-tag.outputs.NEW_RELEASE_TAG_NAME }}
        # Here I use the git describe command to find the most recent *previous tag name* "--tags --abbrev=0"
        # reachable from the parent "^" commit of the current new release
        # Hoping that the closest previous tag is the previous release 
        # which marks the start of the commit messages for this new release
        run: |
          PREVIOUS_RELEASE_TAG_NAME=$(git describe --tags --abbrev=0 ${NEW_RELEASE_TAG_NAME}^)
          echo "PREVIOUS_RELEASE_TAG_NAME=$PREVIOUS_RELEASE_TAG_NAME" >> "GITHUB_OUTPUT"

      - name: Run the script giving it commit messages as source and the start/end tag names obtained
        env:
          NEW_RELEASE_TAG_NAME: ${{ steps.get-new-release-tag.outputs.NEW_RELEASE_TAG_NAME }}
          PREVIOUS_RELEASE_TAG_NAME: ${{ steps.get-previous-release-tag.outputs.PREVIOUS_RELEASE_TAG_NAME }}
        run: ./release_notes_generator message "$PREVIOUS_RELEASE_TAG_NAME" "$NEW_RELEASE_TAG_NAME"
      
      - name: Update new GitHub release description with generated release notes
        # secrets.GITHUB_TOKEN is automatically generated by GitHub for each workflow run
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NEW_RELEASE_TAG_NAME: ${{ steps.get-new-release-tag.outputs.NEW_RELEASE_TAG_NAME }}
        # GitHub's cli tool "gh" automatically uses the GITHUB_TOKEN environment variable
        run: |
          gh release edit "$NEW_RELEASE_TAG_NAME" --notes-file release_notes.md
          gh release upload "$NEW_RELEASE_TAG_NAME" release_notes.html